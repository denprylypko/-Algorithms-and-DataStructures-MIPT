#Кроме массива должна быть еще одна переменнная
#для хранения количества элементов, хранящихся в массиве
Nmax=100
A = [0]*Nmax
n = 0 			#рельно там ничего нет
x = 5 			#int(input())
A[n] = x
n += 1
#удаление из масива с конца
n -= 1
x = A[n]

#-----------------------------------------------
#Список лист - объект, динамический масив
A = []
x = 5
A.append(x)
n = len(A)
#удаление с конца списка
A.pop()

#List comprehentions
A = [x**2 for x in range(10)]
print(A)
#---------------------------->
A = []
for x in range(10):
	A.append(x**2)
#-----------------------------
B = []
A = [1, 2, 3, 4, 5, 7, 12, 9, 6, -3, -5, -4]
for x in A:
	if x%2 == 0:
		B.append(x*x)
print(B)
#----------------------------->
B = [x**2 for x in A if x%2==0]
print(B)

B = [0 if x<0 else x**2 for x in A]
print(B)
#--------------------------------------

#Сортировки
#Квадратичные сортировки - O(n2)
#O(1+2+... +N-1) = N*(N-1)/2 - пропорционально N^2
#Асимптотика алгоритма: по памяти и по скорости вычесления
"""	Вставками(Insert Sort)
	A = [4, 2, 5, 1, 3] Часть массива сама в сибе упорядочена
	0: A = [4, 2, 5, 1, 3]
	1: A = [2!, 4!, 5, 1, 3]
	2: A = [2, 4!, 5!, 1, 3]
	3: A = [2, 4, 1!, 5!, 3]
	4: A = [2, 1!, 4!, 5, 3]
	5: A = [1!, 2!, 4, 5, 3]
	6: A = [1!, 2!, 4, 5, 3]
	7: A = [1, 2, 4, 3!, 5!]
	8: А = [1, 2, 3!, 4!, 5]
"""
#---------------------------------------------------------------
""" Вибором(Choice Sort)
	A = [4, 2, 5, 1, 3]
	0: A = [4!, 2!, 5, 1, 3]+	#[0] - min_elem
	1: A = [2!, 4, 5!, 1, 3]-
	2: A = [2!, 4, 5, 1!, 3]+		
	3: A = [1!_, 4, 5, 2, 3!]- 	#[0]-часть массива окончательно упордочена
	4: A = [1, 4!, 5!, 2, 3]-	#[1] - min_elem
	5: A = [1, 4!, 5, 2!, 3]+
	6: A = [1, 2!_, 5, 4, 3!]- 	#[0:1]-часть массива окончательно упордочена
	7: A = [1, 2, 5!, 4!, 3]+	#[2] - min_elem
	8: А = [1, 2, 4!, 5, 3!]+ 	#[0:2]-часть массива окончательно упордочена,[3] - min_elem
	9: А = [1, 2, 3, 5!, 4!]+	#[0:3]-часть массива окончательно упордочена,[4] - min_elem
	10: А = [1, 2, 3, 4, 5!]+	#[0:4]-часть массива окончательно упорядочена	последний элемент не сортирум
"""
# ------------------------------------------------------------------------------------------------------------
""" Bubble Sort
	A = [4, 2, 5, 1, 3]
	0: A = [4!, 2!, 5, 1, 3]+
	1: A = [2, 4!, 5!, 1, 3]-
	2: A = [2, 4, 5!, 1!, 3]+
	3: A = [2, 4, 1, 5!, 3!]+	#Последний элемент отсортирован, A[N] = max_elem
	4: A = [2!, 4!, 1, 3, 5]-
	5: A = [2, 4!, 1!, 3, 5]+
	6: A = [2, 1, 4!, 3!, 5]+
	7: A = [2!, 1!, 3, 4, 5]+ 	#[3:4] - отсортированы
	8: A = [1, 2!, 3!, 4, 5]	#[2:4] - отсортированы
	9: A = [1!, 2!, 3, 4, 5] - 	#[1:  4] - отсортированы
"""
#O(1+2+... +N-1) = N*(N-1)/2 - пропорционально N^2

def insert_sort(A):
	"""Сортировка списка А вставками"""
	N = len(A)
	for top in range(1, N):
		k = top
		while k > 0 and A[k-1]>A[k]:
			A[k], A[k-1] = A[k-1], A[k]
			k -= 1


def choise_sort(A):
	"""Сортировка списка А выбором"""
	N = len(A)
	for bypass in range(1, N):
		for k in range(0, N-bypass):
			if A[k] > A[k+1]:
				A[k], A[k+1] = A[k+1], A[k]


def bubble_sort(A):
	"""Сортировка списка А пузырьком"""
	N = len(A)
	for pos in range(0, N-1):
		for k in range(pos+1, N):
			if A[k]<A[pos]:
				A[k], A[pos] = A[pos], A[k]


def test_sort(sort_algo):
	print('Тестируем: ',sort_algo.__doc__)
	print('testcase #1: ',end='')
	A = [4, 2, 5, 1, 3]
	A_sorted = [1, 2, 3, 4, 5]
	sort_algo(A)
	print('ok' if A == A_sorted else 'Fail')

	print('testcase #2: ',end='')
	A = list(range(10,20)) + list(range(0,10))
	A_sorted = list(range(20))
	sort_algo(A)
	print('ok' if A == A_sorted else 'Fail')

	print('testcase #3: ',end='')
	A = [4, 2, 4, 2, 1]
	A_sorted = [1, 2, 2, 4, 4]
	sort_algo(A)
	print('ok' if A == A_sorted else 'Fail')
		

if __name__ == "__main__":
	test_sort(insert_sort)
	test_sort(choise_sort)
	test_sort(bubble_sort)

#Списки в питоне можна конкатенировать - создается новый список

#Сортировка подсчётом(Count Sort): 
#O(N) - по времени
#O(M) - по памяти, М-количество различных элементов 
#1, 2, 3, 5, 2, 7, 6, 0, 9, 9, 2, 8, 6, 3, 4, 1, 5, 2, 3, 7, 6, 6, 1, 3, 5, 2
#25 elements = 25*25 = 625 operations при N^2 сортировке
#0: +
#1: +++
#2: +++++
#3: ++++
#4: +
#5: +++
#6: ++++
#7: ++
#8: +
#9: ++
A = [1, 2, 3, 5, 2, 7, 6, 0, 9, 9, 2, 8, 6, 3, 4, 1, 5, 2, 3, 7, 6, 6, 1, 3, 5, 2]
N = len(A)
F = [0]*10
for i in range(N):		#Частотный анализ
	x = A[i]			#Частотный анализ
	F[x] +=1 			#Частотный анализ

for digit in range(len(F)):
	print(str(digit)*F[digit], end='')

print('\n',F)